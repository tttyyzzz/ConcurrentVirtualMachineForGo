/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(blocks) {
        let result = [];
        for (let block of blocks) {
          if (block !== null && !Array.isArray(block)) {
            result.push(block);
          }
        }
      if (result.length > 1)
        return {
      tag:"blk",
      body:{tag:"seq",stmts:result}
      }
      return {
      tag:"blk",
      body:result[0]
      }
      },
      peg$c1 = "{",
      peg$c2 = peg$literalExpectation("{", false),
      peg$c3 = "}",
      peg$c4 = peg$literalExpectation("}", false),
      peg$c5 = function(blocks, a) { // need to check if this work without whitespace
        let result = [];
        for (let block of blocks) {
          if (block !== null && !Array.isArray(block)) {
            result.push(block);
          }
        }
      if (result.length !== 1){
        return {
      tag:"blk",
      body:{tag:"seq",stmts:result},
      //len:result.length
      } 
      }
      return {
        tag:"blk",
        body:result[0]
      }
      },
      peg$c6 = "go",
      peg$c7 = peg$literalExpectation("go", false),
      peg$c8 = function(fc) {
      return {
        tag:"goapp",
        args:fc.args,
        fun:fc.fun
      }
      },
      peg$c9 = "for",
      peg$c10 = peg$literalExpectation("for", false),
      peg$c11 = function(cond, blk) {
      return{ 
           tag:"while",
           pred:cond,
           body:blk
      }
      },
      peg$c12 = ":=",
      peg$c13 = peg$literalExpectation(":=", false),
      peg$c14 = "func(",
      peg$c15 = peg$literalExpectation("func(", false),
      peg$c16 = ")",
      peg$c17 = peg$literalExpectation(")", false),
      peg$c18 = "",
      peg$c19 = function(identifier, functionInputArguments, type, Block) {
            // function body is not defined in this example
            return {
              tag: "fun",
              sym: identifier,
              validSym:isInvalid(identifier),
              //prms:functionInputArguments,
              prms:  functionInputArguments.filter(a => a !== undefined).map(a => a.sym),
              prmtype:  functionInputArguments.filter(a => a !== undefined).map(a => a.type !== undefined ? a.type : "undefined"),
              prmValid:functionInputArguments.filter(a => a !== undefined).map(a=> isInvalid(a.sym)),
              rtntype: (type !== "")? type: "undefined",
              body:Block
            };
          },
      peg$c20 = function(identifier, type, Block) {
            // function body is not defined in this example
            return {
              tag: "fun",
              sym: identifier,
              validSym:isInvalid(identifier),
              prms:  [],
              prmtype:  [],
              prmValid:[],
              rtntype: (type !== "")? type: "undefined",
              body:Block
            };
          },
      peg$c21 = "(",
      peg$c22 = peg$literalExpectation("(", false),
      peg$c23 = function(identifier, args) {
            // split the functional arguments
            //const splittedArgs = args.map(arg => arg.trim());

            //const splittedArgs = args.flat(Infinity)

            return {
              tag: "app",
              // args: Array.from(splittedArgs),
              args: args,
              fun: { tag: "nam", sym: identifier,validSym:isInvalid(identifier) }
            };
          },
      peg$c24 = function(identifier) {
            return {
              tag: "app",
              args: [],
              fun: { tag: "nam", sym: identifier,validSym:isInvalid(identifier) }
            };
          },
      peg$c25 = "func",
      peg$c26 = peg$literalExpectation("func", false),
      peg$c27 = ",",
      peg$c28 = peg$literalExpectation(",", false),
      peg$c29 = function(args) {
      //return args.flat(Infinity).filter(arg => arg !== ",")
      return args.flat(Infinity).filter(arg => arg !== ",")

      },
      peg$c30 = "return",
      peg$c31 = peg$literalExpectation("return", false),
      peg$c32 = function(expr) {
         return {
           "tag":"ret",
           "expr":expr
         }
      },
      peg$c33 = "while",
      peg$c34 = peg$literalExpectation("while", false),
      peg$c35 = function(cond, blk) {
      return {tag:"while", pred:cond, body:blk.body}
      },
      peg$c36 = "if",
      peg$c37 = peg$literalExpectation("if", false),
      peg$c38 = function(cond, ass) {
            return { tag: "cond", pred: cond, cons: ass, alt: { tag: "seq", stmts: [] } };
          },
      peg$c39 = "else",
      peg$c40 = peg$literalExpectation("else", false),
      peg$c41 = function(cond, ass1, elsecons) {
            return { tag: "cond", pred: cond, cons: ass1.body, alt: elsecons };
          },
      peg$c42 = function(cond, ass1, ass2) {
            return { tag: "cond", pred: cond, cons: ass1.body, alt: ass2.body };
          },
      peg$c43 = function(cond, ass) {
            return { tag: "cond", pred: cond, cons: ass.body, alt: { tag: "seq", stmts: [] } };
          },
      peg$c44 = function(conVal, binLogOp, cond) {
      return {"tag":"binop","sym":binLogOp,"frst":conVal,"scnd":cond}
      },
      peg$c45 = "true",
      peg$c46 = peg$literalExpectation("true", false),
      peg$c47 = "false",
      peg$c48 = peg$literalExpectation("false", false),
      peg$c49 = function(a) {
      return {"tag": "lit", "val":a === "true",type:"bool"}
      },
      peg$c50 = "var",
      peg$c51 = peg$literalExpectation("var", false),
      peg$c52 = "sync.Mutex",
      peg$c53 = peg$literalExpectation("sync.Mutex", false),
      peg$c54 = "sync.WaitGroup",
      peg$c55 = peg$literalExpectation("sync.WaitGroup", false),
      peg$c56 = function(vN, type) {
            return {
              tag: "initCtrl",
              sym: vN,
              type: type === "sync.Mutex" ? "mutexinit":"waitgroupinit"
            };
          },
      peg$c57 = "chan",
      peg$c58 = peg$literalExpectation("chan", false),
      peg$c59 = "int",
      peg$c60 = peg$literalExpectation("int", false),
      peg$c61 = "float32",
      peg$c62 = peg$literalExpectation("float32", false),
      peg$c63 = "bool",
      peg$c64 = peg$literalExpectation("bool", false),
      peg$c65 = function(vN, type) {
             return {tag:"initChannel",type:type,sym:vN} 
      },
      peg$c66 = function(vN, type) {
            return {
              tag: "let",
              sym: vN,
              expr: type === "bool"? {tag:"lit",val:false}:{tag:"lit",val:0},
             a:type
            };
       },
      peg$c67 = "const",
      peg$c68 = peg$literalExpectation("const", false),
      peg$c69 = function(vN, type) {
            return {
              tag: "const",
              sym: vN,
              expr: type === "bool"? {tag:"lit",val:false}:{tag:"lit",val:0},
             a:type
            };
       },
      peg$c70 = "=",
      peg$c71 = peg$literalExpectation("=", false),
      peg$c72 = function(vN, type, assignmentValue) {
            return {
              tag: "let",
              sym: vN,
              expr: assignmentValue,
              exprtype: assignmentValue.type,
              type:type
            };
          },
      peg$c73 = function(vN, assignmentValue) {
        return {
        tag:"let",
        sym:vN,
        expr:assignmentValue
      }
      },
      peg$c74 = function(vN, assignmentValue) {
        return {
        tag:"assmt",
        sym:vN,
        expr:assignmentValue
      }
      },
      peg$c75 = "defer",
      peg$c76 = peg$literalExpectation("defer", false),
      peg$c77 = ".Done()",
      peg$c78 = peg$literalExpectation(".Done()", false),
      peg$c79 = function(vN) {
        return {tag:"ctrlAccess","sym":vN,type:"waitgroupdone"}
      },
      peg$c80 = ".Wait()",
      peg$c81 = peg$literalExpectation(".Wait()", false),
      peg$c82 = function(vN) {
        return {tag:"ctrlAccess","sym":vN,type:"waitgroupwait"}
      },
      peg$c83 = ".Lock()",
      peg$c84 = peg$literalExpectation(".Lock()", false),
      peg$c85 = function(vN) {
        return {tag:"ctrlAccess","sym":vN,type:"mutexLock"} 
      },
      peg$c86 = ".Unlock()",
      peg$c87 = peg$literalExpectation(".Unlock()", false),
      peg$c88 = function(vN) {
        return {tag:"ctrlAccess","sym":vN,type:"mutexUnlock"} 
      },
      peg$c89 = ".Add(",
      peg$c90 = peg$literalExpectation(".Add(", false),
      peg$c91 = function(vN, num) {
        return {tag:"ctrlAccess","sym":vN,type:"waitgroupadd",val:num}},
      peg$c92 = "<-",
      peg$c93 = peg$literalExpectation("<-", false),
      peg$c94 = function(vN1, vN2) {
          return{ tag:"sendChannel",
                  sym: vN1,
                  expr: {tag:"nam",sym:vN2}
               } 
      },
      peg$c95 = function(vN1, num) {
          return{ tag:"sendChannel",
                  sym: vN1,
                  expr: {tag:"lit",val:num}
               } 
      },
      peg$c96 = function(vN1, vN2) {
          return{ tag:"let",
                  sym:vN1,
                  expr:{tag:"recvChannel",sym:vN2}
      }
      },
      peg$c97 = function(opIA1, binop, opIA2) {
            return {
              tag: "binop",
              sym: binop,
              frst: opIA1,
              scnd: opIA2,
              frsttype:opIA1.type,
              scndtype:opIA2.type,
              type:(opIA1.type==="number" && opIA2.type==="number")? "number"
                     :(opIA1.type==="float32" && opIA2.type!=="int")? "float32"
                     :(opIA2.type==="float32" && opIA1.type!=="int")? "float32"
                     :(opIA1.type==="int" && opIA2.type!=="float32")? int
                     : (opIA2.type==="int" && opIA1.type!=="float32")? int
                     : "undefined" // there is only  3 types in this case, float32, int ,number
            };
          },
      peg$c98 = function(args) {
          return args.flat(Infinity)
                     .filter(arg => arg !== ",")
                     .map((arg, index, arr) => {
                       if (typeof arg !== 'string') {
                         return { ...arg, type: arr[index + 1] };
                       }
                       return arg;
                     }).filter(arg => typeof arg !== 'string') ;
      },
      peg$c99 = function(identifier) {
      return {tag:"nam",sym:identifier,validSym:isInvalid(identifier)}
      },
      peg$c100 = function(identifier) {  // changed here
        return identifier
      },
      peg$c101 = function(identifier) {
      return {tag:"lit",val:identifier,type:"number"}
      },
      peg$c102 = /^[0-9]/,
      peg$c103 = peg$classExpectation([["0", "9"]], false, false),
      peg$c104 = ".",
      peg$c105 = peg$literalExpectation(".", false),
      peg$c106 = function(digits) { return parseFloat(digits, 10); },
      peg$c107 = function() { return parseInt(text(), 10); },
      peg$c108 = /^[a-zA-Z_]/,
      peg$c109 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c110 = /^[a-zA-Z0-9_]/,
      peg$c111 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
      peg$c112 = function(vN) {
      return vN;
      //return vN.flat().join('');
      },
      peg$c113 = function(vN) {
        return vN
        //return vN.flat().join('');
      },
      peg$c114 = "||",
      peg$c115 = peg$literalExpectation("||", false),
      peg$c116 = "&&",
      peg$c117 = peg$literalExpectation("&&", false),
      peg$c118 = function(op) {
      return op
      },
      peg$c119 = "+",
      peg$c120 = peg$literalExpectation("+", false),
      peg$c121 = "-",
      peg$c122 = peg$literalExpectation("-", false),
      peg$c123 = "*",
      peg$c124 = peg$literalExpectation("*", false),
      peg$c125 = "/",
      peg$c126 = peg$literalExpectation("/", false),
      peg$c127 = "==",
      peg$c128 = peg$literalExpectation("==", false),
      peg$c129 = ">",
      peg$c130 = peg$literalExpectation(">", false),
      peg$c131 = "<",
      peg$c132 = peg$literalExpectation("<", false),
      peg$c133 = "<=",
      peg$c134 = peg$literalExpectation("<=", false),
      peg$c135 = ">=",
      peg$c136 = peg$literalExpectation(">=", false),
      peg$c137 = /^[ \t\r\n\t]/,
      peg$c138 = peg$classExpectation([" ", "\t", "\r", "\n", "\t"], false, false),
      peg$c139 = function(ws) {
      return undefined
      },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsemainBlock();

    return s0;
  }

  function peg$parsemainBlock() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsegoWhile();
      if (s3 === peg$FAILED) {
        s3 = peg$parseconditionals();
        if (s3 === peg$FAILED) {
          s3 = peg$parsewhileLoop();
          if (s3 === peg$FAILED) {
            s3 = peg$parsefunctionDeclaration();
            if (s3 === peg$FAILED) {
              s3 = peg$parsegoFunctionCall();
              if (s3 === peg$FAILED) {
                s3 = peg$parsefirstClassFunction();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsefunctionCall();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsereceiveFromChannel();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsesendToChannel();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseassignment();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsewaitgroupandmutexcommands();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsetypeChannelInstantiation();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseBlock();
                              if (s3 === peg$FAILED) {
                                s3 = [];
                                s4 = peg$parsewhitespace();
                                if (s4 !== peg$FAILED) {
                                  while (s4 !== peg$FAILED) {
                                    s3.push(s4);
                                    s4 = peg$parsewhitespace();
                                  }
                                } else {
                                  s3 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsegoWhile();
        if (s3 === peg$FAILED) {
          s3 = peg$parseconditionals();
          if (s3 === peg$FAILED) {
            s3 = peg$parsewhileLoop();
            if (s3 === peg$FAILED) {
              s3 = peg$parsefunctionDeclaration();
              if (s3 === peg$FAILED) {
                s3 = peg$parsegoFunctionCall();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsefirstClassFunction();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsefunctionCall();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsereceiveFromChannel();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsesendToChannel();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseassignment();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsewaitgroupandmutexcommands();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parsetypeChannelInstantiation();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parseBlock();
                                if (s3 === peg$FAILED) {
                                  s3 = [];
                                  s4 = peg$parsewhitespace();
                                  if (s4 !== peg$FAILED) {
                                    while (s4 !== peg$FAILED) {
                                      s3.push(s4);
                                      s4 = peg$parsewhitespace();
                                    }
                                  } else {
                                    s3 = peg$FAILED;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlock() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsegoWhile();
        if (s4 === peg$FAILED) {
          s4 = peg$parseconditionals();
          if (s4 === peg$FAILED) {
            s4 = peg$parsewhileLoop();
            if (s4 === peg$FAILED) {
              s4 = peg$parsefunctionDeclaration();
              if (s4 === peg$FAILED) {
                s4 = peg$parsegoFunctionCall();
                if (s4 === peg$FAILED) {
                  s4 = peg$parsefirstClassFunction();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parsefunctionCall();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseBlock();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parsefunctionReturnStatement();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parsereceiveFromChannel();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parsesendToChannel();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parseassignment();
                              if (s4 === peg$FAILED) {
                                s4 = peg$parsewaitgroupandmutexcommands();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parsetypeChannelInstantiation();
                                  if (s4 === peg$FAILED) {
                                    s4 = [];
                                    s5 = peg$parsewhitespace();
                                    if (s5 !== peg$FAILED) {
                                      while (s5 !== peg$FAILED) {
                                        s4.push(s5);
                                        s5 = peg$parsewhitespace();
                                      }
                                    } else {
                                      s4 = peg$FAILED;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsegoWhile();
          if (s4 === peg$FAILED) {
            s4 = peg$parseconditionals();
            if (s4 === peg$FAILED) {
              s4 = peg$parsewhileLoop();
              if (s4 === peg$FAILED) {
                s4 = peg$parsefunctionDeclaration();
                if (s4 === peg$FAILED) {
                  s4 = peg$parsegoFunctionCall();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parsefirstClassFunction();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parsefunctionCall();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parseBlock();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parsefunctionReturnStatement();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parsereceiveFromChannel();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parsesendToChannel();
                              if (s4 === peg$FAILED) {
                                s4 = peg$parseassignment();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parsewaitgroupandmutexcommands();
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$parsetypeChannelInstantiation();
                                    if (s4 === peg$FAILED) {
                                      s4 = [];
                                      s5 = peg$parsewhitespace();
                                      if (s5 !== peg$FAILED) {
                                        while (s5 !== peg$FAILED) {
                                          s4.push(s5);
                                          s5 = peg$parsewhitespace();
                                        }
                                      } else {
                                        s4 = peg$FAILED;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c5(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegoFunctionCall() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefunctionCall();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegoWhile() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecondition();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBlock();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c11(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefirstClassFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s3 = peg$c12;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c14) {
              s5 = peg$c14;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefunctionDeclarationInputArguments();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsewhitespace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsewhitespace();
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c16;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parsewhitespace();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parsewhitespace();
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetype();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c18;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsewhitespace();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsewhitespace();
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseBlock();
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c19(s1, s6, s10, s12);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevariableName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s3 = peg$c12;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewhitespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c14) {
                s5 = peg$c14;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewhitespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewhitespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsewhitespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsewhitespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsetype();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c18;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsewhitespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsewhitespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseBlock();
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c20(s1, s9, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefunctionCall() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefunctionInputArguments();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c16;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevariableName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c16;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefunctionDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c21;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefunctionDeclarationInputArguments();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c16;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsewhitespace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsewhitespace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetype();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c18;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsewhitespace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsewhitespace();
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseBlock();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c19(s3, s5, s9, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevariableName();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c21;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsewhitespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsewhitespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewhitespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewhitespace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetype();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c18;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parsewhitespace();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parsewhitespace();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseBlock();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c20(s3, s8, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefunctionInputArguments() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsewhitespace();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsewhitespace();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinputArgument();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsewhitespace();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parsewhitespace();
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c27;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parsewhitespace();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parsewhitespace();
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseinputArgument();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c27;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parsewhitespace();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsewhitespace();
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseinputArgument();
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefunctionReturnStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c30) {
        s2 = peg$c30;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseoperatorArimetricInputArgument();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhileLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecondition();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c16;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsewhitespace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsewhitespace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseBlock();
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsewhitespace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsewhitespace();
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c35(s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditional() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecondition();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBlock();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c38(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditionals() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecondition();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBlock();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c39) {
                  s7 = peg$c39;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsewhitespace();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsewhitespace();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseconditionals();
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsewhitespace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsewhitespace();
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c41(s3, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewhitespace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecondition();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewhitespace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsewhitespace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBlock();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewhitespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewhitespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c39) {
                    s7 = peg$c39;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c40); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsewhitespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsewhitespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseBlock();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsewhitespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsewhitespace();
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c42(s3, s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c36) {
          s1 = peg$c36;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewhitespace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewhitespace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecondition();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsewhitespace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsewhitespace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseBlock();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsewhitespace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsewhitespace();
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecondition() {
    var s0;

    s0 = peg$parsebinaryLogicalOperatorAssignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseconditionValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoperatorArimetricInputArgument();
      }
    }

    return s0;
  }

  function peg$parsebinaryLogicalOperatorAssignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseconditionValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebinaryLogicalOperator();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecondition();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c44(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditionValue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c47) {
        s1 = peg$c47;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseassignment() {
    var s0;

    s0 = peg$parsetypeChannelInstantiation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetypedVariableInstantiation();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetypedVariableDeclarableAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parseconstTypedVariableDeclarableAssignment();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetypedVariableDefaultDeclaration();
            if (s0 === peg$FAILED) {
              s0 = peg$parseconstTypedVariableDefaultDeclaration();
              if (s0 === peg$FAILED) {
                s0 = peg$parsevariableDeclarableAssignment();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsevariableAssignment();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetypedVariableInstantiation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c52) {
              s5 = peg$c52;
              peg$currPos += 10;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 14) === peg$c54) {
                s5 = peg$c54;
                peg$currPos += 14;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeChannelInstantiation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c57) {
              s5 = peg$c57;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewhitespace();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c59) {
                  s7 = peg$c59;
                  peg$currPos += 3;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c61) {
                    s7 = peg$c61;
                    peg$currPos += 7;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c63) {
                      s7 = peg$c63;
                      peg$currPos += 4;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c64); }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c65(s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypedVariableDefaultDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsetype();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsetype();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c66(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstTypedVariableDefaultDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsetype();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsetype();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c69(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypedVariableDeclarableAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsetype();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsetype();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c70;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c71); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsewhitespace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsewhitespace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsecondition();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseoperatorArimetricInputArgument();
                      if (s9 === peg$FAILED) {
                        s9 = [];
                        s10 = peg$parsebinaryArimetricOperatorAssignment();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parsebinaryArimetricOperatorAssignment();
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsewhitespace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsewhitespace();
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72(s3, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstTypedVariableDeclarableAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsetype();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsetype();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c70;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c71); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsewhitespace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsewhitespace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsecondition();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseoperatorArimetricInputArgument();
                      if (s9 === peg$FAILED) {
                        s9 = [];
                        s10 = peg$parsebinaryArimetricOperatorAssignment();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parsebinaryArimetricOperatorAssignment();
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsewhitespace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsewhitespace();
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72(s3, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableDeclarableAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s3 = peg$c12;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecondition();
            if (s5 === peg$FAILED) {
              s5 = peg$parseoperatorArimetricInputArgument();
              if (s5 === peg$FAILED) {
                s5 = [];
                s6 = peg$parsebinaryArimetricOperatorAssignment();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsebinaryArimetricOperatorAssignment();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c73(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c70;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecondition();
            if (s5 === peg$FAILED) {
              s5 = peg$parseoperatorArimetricInputArgument();
              if (s5 === peg$FAILED) {
                s5 = [];
                s6 = peg$parsebinaryArimetricOperatorAssignment();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsebinaryArimetricOperatorAssignment();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c74(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewaitgroupandmutexcommands() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c75) {
      s1 = peg$c75;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableName();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c77) {
            s4 = peg$c77;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c79(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevariableName();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c80) {
          s2 = peg$c80;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariableName();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c83) {
            s2 = peg$c83;
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c85(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsevariableName();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c86) {
              s2 = peg$c86;
              peg$currPos += 9;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevariableName();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c89) {
                s2 = peg$c89;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenumber();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s4 = peg$c16;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c91(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesendToChannel() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c92) {
          s3 = peg$c92;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevariableName();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c94(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevariableName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c92) {
            s3 = peg$c92;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewhitespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c95(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsereceiveFromChannel() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s3 = peg$c12;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c92) {
              s5 = peg$c92;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevariableName();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c96(s1, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetype() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c61) {
        s0 = peg$c61;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c63) {
          s0 = peg$c63;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
      }
    }

    return s0;
  }

  function peg$parsebinaryArimetricOperatorAssignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseleftArimetricInputArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebinaryArimetricOperator();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoperatorArimetricInputArgument();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c97(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseleftArimetricInputArgument() {
    var s0;

    s0 = peg$parseinputArgument();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumber();
    }

    return s0;
  }

  function peg$parseoperatorArimetricInputArgument() {
    var s0;

    s0 = peg$parsebinaryArimetricOperatorAssignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinputArgument();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
      }
    }

    return s0;
  }

  function peg$parsefunctionDeclarationInputArguments() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsewhitespace();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsewhitespace();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinputArgument();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsewhitespace();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parsewhitespace();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetype();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsewhitespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsewhitespace();
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c27;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parsewhitespace();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parsewhitespace();
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseinputArgument();
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parsewhitespace();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parsewhitespace();
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsetype();
                      if (s13 !== peg$FAILED) {
                        s14 = [];
                        s15 = peg$parsewhitespace();
                        while (s15 !== peg$FAILED) {
                          s14.push(s15);
                          s15 = peg$parsewhitespace();
                        }
                        if (s14 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12, s13, s14];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c27;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parsewhitespace();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parsewhitespace();
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseinputArgument();
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parsewhitespace();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parsewhitespace();
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsetype();
                        if (s13 !== peg$FAILED) {
                          s14 = [];
                          s15 = peg$parsewhitespace();
                          while (s15 !== peg$FAILED) {
                            s14.push(s15);
                            s15 = peg$parsewhitespace();
                          }
                          if (s14 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12, s13, s14];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6, s7];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c98(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefunctionDeclarationInput() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevariableName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseinputArgument() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefunctionCall();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevariableName();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhitespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhitespace();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c99(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c101(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseFloat() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    if (peg$c102.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$c102.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c104;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$c102.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c102.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c106(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;

    s0 = peg$parseFloat();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c102.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c102.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c107();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefunctionKeyword() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c25) {
      s0 = peg$c25;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    return s0;
  }

  function peg$parsekeyword() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c39) {
        s0 = peg$c39;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c33) {
          s0 = peg$c33;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c25) {
            s0 = peg$c25;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c50) {
              s0 = peg$c50;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c30) {
                s0 = peg$c30;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c45) {
                  s0 = peg$c45;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c47) {
                    s0 = peg$c47;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevariableName() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$c108.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (peg$c110.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c110.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c112(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevariableCommand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$c108.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (peg$c110.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c110.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c113(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebinaryLogicalOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c114) {
      s1 = peg$c114;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c115); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebinaryArimetricOperator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c119;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c121;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c123;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s0 = peg$c125;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c127) {
              s0 = peg$c127;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c128); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c129;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s0 = peg$c131;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c133) {
                    s0 = peg$c133;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c134); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c135) {
                      s0 = peg$c135;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c136); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c137.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c139(s1);
    }
    s0 = s1;

    return s0;
  }


    function isInvalid(word) {
      return !["var", "go", "func","true","false","int","float32","bool","if" , "else" , "while" , "return","defer","sync.WaitGroup","sync.Mutex"].includes(word);
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
